# -*- coding: utf-8 -*-
"""Python Project Euler

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/anursen/e27a96077a976b7919899a8aace93943/python-project-euler.ipynb

#Project Euler
https://projecteuler.net

#35 Circular Primes
https://projecteuler.net/problem=35
The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.

There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.

How many circular primes are there below one million?
"""

#1 Create a Circular number creator function
#2 Check the members if prime

n = 197

197 197

197
971
719

1234 1234

1234
2341
3412
4123

#as we can see from the produced numbers, produced numbers are the pieces of a str(number*2)

#1 
def circular_number_creator(n):
  n_str = str(n)
  cir_numbers = []
  number = n_str*2
  for i in range(len(n_str)):
    cir_numbers.append(int(number[i:i+len(n_str)]))
  return(cir_numbers)

2 # isprime
def isprime(n):
  a=[]
  for i in range(2,n):
    if n % i != 0:
      pass
    else:
      a.append(i)
  if a == []:
    return True
  else:
    return False

my_set = set()
for i in range(1,1000*100):
  if i % 2 == 0 or i%3 ==0 or i%5 == 0:
    continue
  if isprime(i) == True:
    for j in circular_number_creator(i):
      if isprime(j) == True:
        my_set.add(i)
print(sorted(my_set))
print(len(my_set))

for i in range(1234,2000):
  if '2' in str(i) or '4' in str(i) or '6' in str(i) or '8' in str(i) or '0' in str(i):
    continue
  for j in circular_number_creator(i):
      if isprime(j) == False:
        continue


isprime(1311)



a = [True,True,False,True]
while i in a == True:
  print(i)

a = [[1,2],[2,3],[4,5,6]]
for i in a:
  if all(i) > 4 :
    print(i)



"""#Not Finished #37 Truncatable Primers
https://projecteuler.net/problem=37

The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.

Find the sum of the only eleven primes that are both truncatable from left to right and right to left.

NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
"""

#1 Check if prime
#2 Produce number cutting from left
#3 check from right if prime
#4 add to list

1 # isprime
def isprime(n):
  a=[]
  for i in range(2,n):
    if n % i != 0:
      pass
    else:
      a.append(i)
  if a == []:
    return True
  else:
    return False

2 #leftcut(n) functions return list of leftcutted []
def leftcut(n):
  leftcutted =[]
  for i in range(len(str(n))):
    leftcutted.append((int(str(n)[i:len(str(n))])))
  return(leftcutted)

3 # rightcut(n) function returns list of rightcutted []
def rightcut(n):
  rightcutted =[]
  for i in range(len(str(n))):
    rightcutted.append((int(str(n)[0:len(str(n))-i])))
  return(rightcutted)

for i in range(1234,1235):
  checklist = []
  check = []
  checklist.append(i)
  checklist.extend(leftcut(i))
  checklist.extend(rightcut(i))
  for j in checklist:
    if isprime(j) != True:
      pass
    else:
      check.append(j)
  if check == []:
    pass
  else:
    print('Yes baby' + str(i))



isprime(110)

print(leftcut(9973))
print(rightcut(9973))
isprime()



"""# 34 Digit Factorials
145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.

Find the sum of all numbers which are equal to the sum of the factorial of their digits.

Note: As 1! = 1 and 2! = 2 are not sums they are not included.
"""